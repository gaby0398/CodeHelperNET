# LINQ (LANGUAGE INTEGRATED QUERY) - GUÍA COMPLETA

## 1. INTRODUCCIÓN A LINQ

### ¿Qué es LINQ?

LINQ (Language Integrated Query) es una característica de C# que permite escribir consultas directamente en el código C# de manera declarativa. LINQ proporciona una forma unificada de consultar diferentes tipos de datos como colecciones, bases de datos, XML y más.

**Características principales:**
- **Sintaxis unificada**: Misma sintaxis para diferentes fuentes de datos
- **IntelliSense**: Soporte completo en el IDE
- **Verificación de tipos**: Comprobación en tiempo de compilación
- **Optimización**: Consultas optimizadas automáticamente
- **Extensibilidad**: Posibilidad de crear proveedores personalizados

### Tipos de LINQ
- **LINQ to Objects**: Para colecciones en memoria
- **LINQ to SQL**: Para bases de datos SQL Server
- **LINQ to XML**: Para documentos XML
- **LINQ to Entities**: Para Entity Framework
- **LINQ to DataSet**: Para DataSets

## 2. SINTAXIS DE CONSULTA VS SINTAXIS DE MÉTODO

### Sintaxis de Consulta (Query Syntax)

```csharp
// Consulta básica
var numeros = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

var pares = from n in numeros
            where n % 2 == 0
            select n;

var cuadrados = from n in numeros
                select n * n;

var paresCuadrados = from n in numeros
                     where n % 2 == 0
                     select n * n;

// Consulta con ordenamiento
var ordenados = from n in numeros
                orderby n descending
                select n;

// Consulta con agrupación
var agrupados = from n in numeros
                group n by n % 2 == 0 into g
                select new { EsPar = g.Key, Numeros = g.ToList() };
```

### Sintaxis de Método (Method Syntax)

```csharp
// Operaciones básicas
var pares = numeros.Where(n => n % 2 == 0);
var cuadrados = numeros.Select(n => n * n);
var paresCuadrados = numeros.Where(n => n % 2 == 0).Select(n => n * n);

// Ordenamiento
var ordenados = numeros.OrderByDescending(n => n);

// Agrupación
var agrupados = numeros.GroupBy(n => n % 2 == 0)
                       .Select(g => new { EsPar = g.Key, Numeros = g.ToList() });
```

### Comparación de Sintaxis

```csharp
// Ejemplo con objetos complejos
var personas = new List<Persona>
{
    new Persona { Nombre = "Ana", Edad = 25, Ciudad = "Madrid" },
    new Persona { Nombre = "Juan", Edad = 30, Ciudad = "Barcelona" },
    new Persona { Nombre = "María", Edad = 22, Ciudad = "Madrid" },
    new Persona { Nombre = "Carlos", Edad = 35, Ciudad = "Valencia" }
};

// Sintaxis de consulta
var madrilenos = from p in personas
                 where p.Ciudad == "Madrid"
                 orderby p.Edad
                 select new { p.Nombre, p.Edad };

// Sintaxis de método
var madrilenos2 = personas.Where(p => p.Ciudad == "Madrid")
                         .OrderBy(p => p.Edad)
                         .Select(p => new { p.Nombre, p.Edad });
```

## 3. OPERADORES DE PROYECCIÓN

### Select - Proyección Simple

```csharp
// Proyección básica
var nombres = personas.Select(p => p.Nombre);
var edades = personas.Select(p => p.Edad);

// Proyección con transformación
var nombresMayusculas = personas.Select(p => p.Nombre.ToUpper());
var edadesConTexto = personas.Select(p => $"{p.Nombre} tiene {p.Edad} años");

// Proyección a tipos anónimos
var infoBasica = personas.Select(p => new { p.Nombre, p.Edad });
var infoCompleta = personas.Select(p => new 
{ 
    p.Nombre, 
    p.Edad, 
    EsMayorDeEdad = p.Edad >= 18,
    AñoNacimiento = DateTime.Now.Year - p.Edad
});
```

### SelectMany - Proyección Plana

```csharp
// SelectMany con arrays
var frutas = new List<string> { "Manzana", "Banana", "Naranja" };
var letras = frutas.SelectMany(f => f.ToCharArray());

// SelectMany con colecciones anidadas
var estudiantes = new List<Estudiante>
{
    new Estudiante { Nombre = "Ana", Cursos = new List<string> { "Matemáticas", "Física" } },
    new Estudiante { Nombre = "Juan", Cursos = new List<string> { "Historia", "Literatura", "Arte" } }
};

var todosLosCursos = estudiantes.SelectMany(e => e.Cursos);

// SelectMany con índice
var frutasConIndice = frutas.SelectMany((fruta, indice) => 
    fruta.Select(letra => new { Fruta = fruta, Indice = indice, Letra = letra }));
```

### Select con Índice

```csharp
// Select con índice
var numerosConIndice = numeros.Select((numero, indice) => 
    new { Numero = numero, Indice = indice, EsPrimero = indice == 0 });

// Aplicación práctica
var elementosConPosicion = personas.Select((persona, indice) => 
    new { Posicion = indice + 1, persona.Nombre, persona.Edad });
```

## 4. OPERADORES DE FILTRADO

### Where - Filtrado Básico

```csharp
// Filtrado simple
var mayoresDe25 = personas.Where(p => p.Edad > 25);
var madrilenos = personas.Where(p => p.Ciudad == "Madrid");

// Filtrado con múltiples condiciones
var adultosMadrilenos = personas.Where(p => p.Edad >= 18 && p.Ciudad == "Madrid");
var jovenesOValencianos = personas.Where(p => p.Edad < 25 || p.Ciudad == "Valencia");

// Filtrado con métodos
var nombresLargos = personas.Where(p => p.Nombre.Length > 4);
var personasConA = personas.Where(p => p.Nombre.Contains("a"));
```

### Where con Índice

```csharp
// Where con índice
var elementosPares = numeros.Where((numero, indice) => indice % 2 == 0);
var primeros5 = personas.Where((persona, indice) => indice < 5);
```

### Filtrado con Tipos

```csharp
// Filtrado por tipo
var objetos = new List<object> { "Hola", 42, true, "Mundo", 3.14 };

var strings = objetos.OfType<string>();
var numeros = objetos.OfType<int>();
var booleanos = objetos.OfType<bool>();
```

## 5. OPERADORES DE ORDENAMIENTO

### Ordenamiento Básico

```csharp
// Ordenamiento ascendente
var ordenadosPorEdad = personas.OrderBy(p => p.Edad);
var ordenadosPorNombre = personas.OrderBy(p => p.Nombre);

// Ordenamiento descendente
var ordenadosPorEdadDesc = personas.OrderByDescending(p => p.Edad);
var ordenadosPorNombreDesc = personas.OrderByDescending(p => p.Nombre);
```

### Ordenamiento Múltiple

```csharp
// Ordenamiento por múltiples criterios
var ordenadosMultiples = personas.OrderBy(p => p.Ciudad)
                                 .ThenBy(p => p.Edad)
                                 .ThenByDescending(p => p.Nombre);

// Sintaxis de consulta equivalente
var ordenadosMultiplesQuery = from p in personas
                              orderby p.Ciudad, p.Edad, p.Nombre descending
                              select p;
```

### Ordenamiento Personalizado

```csharp
// Ordenamiento con comparador personalizado
var ordenadosPersonalizado = personas.OrderBy(p => p.Nombre, StringComparer.OrdinalIgnoreCase);

// Ordenamiento con lógica compleja
var ordenadosPorPrioridad = personas.OrderBy(p => 
{
    if (p.Ciudad == "Madrid") return 1;
    if (p.Ciudad == "Barcelona") return 2;
    return 3;
});
```

## 6. OPERADORES DE AGRUPACIÓN

### GroupBy - Agrupación Básica

```csharp
// Agrupación por una propiedad
var agrupadosPorCiudad = personas.GroupBy(p => p.Ciudad);

foreach (var grupo in agrupadosPorCiudad)
{
    Console.WriteLine($"Ciudad: {grupo.Key}");
    foreach (var persona in grupo)
    {
        Console.WriteLine($"  - {persona.Nombre} ({persona.Edad} años)");
    }
}

// Agrupación con proyección
var resumenPorCiudad = personas.GroupBy(p => p.Ciudad)
                               .Select(g => new 
                               { 
                                   Ciudad = g.Key, 
                                   Cantidad = g.Count(),
                                   PromedioEdad = g.Average(p => p.Edad)
                               });
```

### Agrupación Múltiple

```csharp
// Agrupación por múltiples criterios
var agrupadosMultiples = personas.GroupBy(p => new { p.Ciudad, EsMayorDeEdad = p.Edad >= 18 });

// Agrupación con resultado personalizado
var estadisticasPorCiudad = personas.GroupBy(p => p.Ciudad)
                                    .Select(g => new
                                    {
                                        Ciudad = g.Key,
                                        TotalPersonas = g.Count(),
                                        PromedioEdad = g.Average(p => p.Edad),
                                        EdadMinima = g.Min(p => p.Edad),
                                        EdadMaxima = g.Max(p => p.Edad),
                                        Personas = g.ToList()
                                    });
```

## 7. OPERADORES DE CONJUNTO

### Union, Intersect, Except

```csharp
var lista1 = new List<int> { 1, 2, 3, 4, 5 };
var lista2 = new List<int> { 4, 5, 6, 7, 8 };

// Unión (elementos únicos de ambas listas)
var union = lista1.Union(lista2); // 1, 2, 3, 4, 5, 6, 7, 8

// Intersección (elementos comunes)
var interseccion = lista1.Intersect(lista2); // 4, 5

// Diferencia (elementos en lista1 pero no en lista2)
var diferencia = lista1.Except(lista2); // 1, 2, 3

// Diferencia simétrica (elementos únicos de cada lista)
var diferenciaSimetrica = lista1.Union(lista2).Except(lista1.Intersect(lista2));
```

### Distinct - Eliminar Duplicados

```csharp
var numerosConDuplicados = new List<int> { 1, 2, 2, 3, 3, 3, 4, 5, 5 };
var numerosUnicos = numerosConDuplicados.Distinct();

// Distinct con comparador personalizado
var personasConDuplicados = new List<Persona>
{
    new Persona { Nombre = "Ana", Edad = 25 },
    new Persona { Nombre = "Ana", Edad = 25 }, // Duplicado
    new Persona { Nombre = "Juan", Edad = 30 }
};

var personasUnicas = personasConDuplicados.Distinct(new PersonaComparer());
```

## 8. OPERADORES DE CUANTIFICACIÓN

### Any, All, Contains

```csharp
// Any - verificar si algún elemento cumple la condición
bool hayMayoresDe30 = personas.Any(p => p.Edad > 30);
bool hayMadrilenos = personas.Any(p => p.Ciudad == "Madrid");

// All - verificar si todos los elementos cumplen la condición
bool todosMayoresDe18 = personas.All(p => p.Edad >= 18);
bool todosTienenNombre = personas.All(p => !string.IsNullOrEmpty(p.Nombre));

// Contains - verificar si la secuencia contiene un elemento
bool contieneAna = personas.Any(p => p.Nombre == "Ana");
bool contieneNumero5 = numeros.Contains(5);
```

### Operadores de Existencia

```csharp
// Verificar existencia con condiciones complejas
bool existePersonaConNombreLargo = personas.Any(p => p.Nombre.Length > 10);
bool todosLosNombresEmpiezanConVocal = personas.All(p => "aeiouAEIOU".Contains(p.Nombre[0]));

// Combinación de operadores
var personasJovenes = personas.Where(p => p.Edad < 25);
bool hayJovenesMadrilenos = personasJovenes.Any(p => p.Ciudad == "Madrid");
```

## 9. OPERADORES DE ELEMENTO

### First, Last, Single

```csharp
// First - primer elemento
var primeraPersona = personas.First();
var primeraPersonaMadrilena = personas.First(p => p.Ciudad == "Madrid");

// FirstOrDefault - primer elemento o valor por defecto
var primeraPersonaValenciana = personas.FirstOrDefault(p => p.Ciudad == "Valencia");

// Last - último elemento
var ultimaPersona = personas.Last();
var ultimaPersonaJoven = personas.Last(p => p.Edad < 30);

// Single - elemento único
var personaUnica = personas.Single(p => p.Nombre == "Ana");
var personaUnicaOpcional = personas.SingleOrDefault(p => p.Nombre == "Pedro");
```

### ElementAt, ElementAtOrDefault

```csharp
// ElementAt - elemento en posición específica
var terceraPersona = personas.ElementAt(2);
var quintaPersona = personas.ElementAtOrDefault(4);

// Aplicación práctica
var personasPaginadas = personas.Skip(10).Take(5);
var primeraPersonaPagina = personasPaginadas.FirstOrDefault();
```

## 10. OPERADORES DE PAGINACIÓN

### Skip, Take

```csharp
// Paginación básica
var pagina1 = personas.Skip(0).Take(5);
var pagina2 = personas.Skip(5).Take(5);
var pagina3 = personas.Skip(10).Take(5);

// Paginación dinámica
int elementosPorPagina = 3;
int pagina = 2;
var paginaActual = personas.Skip((pagina - 1) * elementosPorPagina)
                          .Take(elementosPorPagina);

// Obtener elementos restantes
var elementosRestantes = personas.Skip(5);
var ultimos3 = personas.TakeLast(3);
```

### Paginación con Ordenamiento

```csharp
// Paginación ordenada
var personasOrdenadas = personas.OrderBy(p => p.Nombre);
var paginaOrdenada = personasOrdenadas.Skip(10).Take(5);

// Paginación con múltiples criterios
var paginaCompleja = personas.OrderBy(p => p.Ciudad)
                            .ThenBy(p => p.Edad)
                            .Skip(5)
                            .Take(3);
```

## 11. OPERADORES DE AGRUPACIÓN Y CONCATENACIÓN

### Concat, Zip

```csharp
// Concat - concatenar secuencias
var lista1 = new List<int> { 1, 2, 3 };
var lista2 = new List<int> { 4, 5, 6 };
var concatenada = lista1.Concat(lista2);

// Zip - combinar elementos de dos secuencias
var nombres = new List<string> { "Ana", "Juan", "María" };
var edades = new List<int> { 25, 30, 22 };
var combinados = nombres.Zip(edades, (nombre, edad) => $"{nombre} tiene {edad} años");

// Zip con tres secuencias
var ciudades = new List<string> { "Madrid", "Barcelona", "Valencia" };
var personasCompletas = nombres.Zip(edades, ciudades, 
    (nombre, edad, ciudad) => new { Nombre = nombre, Edad = edad, Ciudad = ciudad });
```

## 12. OPERADORES DE AGRUPACIÓN Y AGRUPACIÓN

### Join - Combinación de Secuencias

```csharp
var clientes = new List<Cliente>
{
    new Cliente { Id = 1, Nombre = "Ana" },
    new Cliente { Id = 2, Nombre = "Juan" },
    new Cliente { Id = 3, Nombre = "María" }
};

var pedidos = new List<Pedido>
{
    new Pedido { Id = 1, ClienteId = 1, Monto = 100 },
    new Pedido { Id = 2, ClienteId = 1, Monto = 200 },
    new Pedido { Id = 3, ClienteId = 2, Monto = 150 }
};

// Join básico
var clientesConPedidos = from c in clientes
                         join p in pedidos on c.Id equals p.ClienteId
                         select new { c.Nombre, p.Monto };

// Join con sintaxis de método
var clientesConPedidos2 = clientes.Join(pedidos,
    cliente => cliente.Id,
    pedido => pedido.ClienteId,
    (cliente, pedido) => new { cliente.Nombre, pedido.Monto });
```

### GroupJoin - Agrupación con Join

```csharp
// GroupJoin - agrupa elementos relacionados
var clientesConTodosLosPedidos = clientes.GroupJoin(pedidos,
    cliente => cliente.Id,
    pedido => pedido.ClienteId,
    (cliente, pedidosCliente) => new 
    { 
        cliente.Nombre, 
        Pedidos = pedidosCliente.ToList(),
        TotalPedidos = pedidosCliente.Sum(p => p.Monto)
    });
```

## 13. OPERADORES DE AGRUPACIÓN Y AGRUPACIÓN

### Aggregate - Agregación Personalizada

```csharp
// Aggregate básico
var suma = numeros.Aggregate((acumulado, actual) => acumulado + actual);
var producto = numeros.Aggregate((acumulado, actual) => acumulado * actual);

// Aggregate con valor inicial
var sumaConInicial = numeros.Aggregate(0, (acumulado, actual) => acumulado + actual);
var concatenacion = nombres.Aggregate("", (acumulado, actual) => acumulado + ", " + actual);

// Aggregate complejo
var estadisticas = numeros.Aggregate(
    new { Min = int.MaxValue, Max = int.MinValue, Sum = 0, Count = 0 },
    (acumulado, actual) => new
    {
        Min = Math.Min(acumulado.Min, actual),
        Max = Math.Max(acumulado.Max, actual),
        Sum = acumulado.Sum + actual,
        Count = acumulado.Count + 1
    },
    resultado => new
    {
        resultado.Min,
        resultado.Max,
        Promedio = (double)resultado.Sum / resultado.Count
    });
```

## 14. OPERADORES DE AGRUPACIÓN Y AGRUPACIÓN

### Operadores de Conversión

```csharp
// ToArray, ToList
var arrayPersonas = personas.ToArray();
var listaPersonas = personas.ToList();

// ToDictionary
var diccionarioPorId = personas.ToDictionary(p => p.Id, p => p.Nombre);
var diccionarioPorNombre = personas.ToDictionary(p => p.Nombre, p => p);

// ToLookup
var lookupPorCiudad = personas.ToLookup(p => p.Ciudad);
var madrilenos = lookupPorCiudad["Madrid"];

// Cast, OfType
var objetos = new List<object> { "Hola", 42, true };
var strings = objetos.OfType<string>();
var numeros = objetos.OfType<int>();
```

## 15. OPERADORES DE AGRUPACIÓN Y AGRUPACIÓN

### Operadores de Secuencia

```csharp
// DefaultIfEmpty
var listaVacia = new List<int>();
var conValorPorDefecto = listaVacia.DefaultIfEmpty(0);

// SequenceEqual
var lista1 = new List<int> { 1, 2, 3 };
var lista2 = new List<int> { 1, 2, 3 };
bool sonIguales = lista1.SequenceEqual(lista2);

// Reverse
var invertidos = numeros.Reverse();
```

## 16. LINQ CON XML

### Consultas XML

```csharp
// Crear XML
var xml = new XElement("Personas",
    personas.Select(p => new XElement("Persona",
        new XElement("Nombre", p.Nombre),
        new XElement("Edad", p.Edad),
        new XElement("Ciudad", p.Ciudad)
    ))
);

// Consultar XML
var nombres = xml.Elements("Persona")
                .Select(p => p.Element("Nombre").Value);

var mayoresDe25 = xml.Elements("Persona")
                     .Where(p => int.Parse(p.Element("Edad").Value) > 25)
                     .Select(p => new
                     {
                         Nombre = p.Element("Nombre").Value,
                         Edad = int.Parse(p.Element("Edad").Value)
                     });
```

## 17. LINQ CON ENTITY FRAMEWORK

### Consultas a Base de Datos

```csharp
// Consulta básica
var clientes = context.Clientes.Where(c => c.Ciudad == "Madrid").ToList();

// Consulta con Include
var clientesConPedidos = context.Clientes
    .Include(c => c.Pedidos)
    .Where(c => c.Pedidos.Any())
    .ToList();

// Consulta con proyección
var resumenClientes = context.Clientes
    .Select(c => new
    {
        c.Nombre,
        TotalPedidos = c.Pedidos.Count,
        MontoTotal = c.Pedidos.Sum(p => p.Monto)
    })
    .ToList();
```

## 18. OPTIMIZACIÓN DE LINQ

### Ejecución Diferida vs Inmediata

```csharp
// Ejecución diferida
var consulta = personas.Where(p => p.Edad > 25); // No se ejecuta aún
personas.Add(new Persona { Nombre = "Nuevo", Edad = 30 }); // Se añade a la consulta
var resultado = consulta.ToList(); // Ahora se ejecuta

// Ejecución inmediata
var resultadoInmediato = personas.Where(p => p.Edad > 25).ToList(); // Se ejecuta inmediatamente
```

### Mejores Prácticas

```csharp
// Usar Where antes que Select
var optimizado = personas.Where(p => p.Edad > 25)
                        .Select(p => p.Nombre);

// Evitar múltiples iteraciones
var lista = personas.ToList(); // Materializar una vez
var nombres = lista.Select(p => p.Nombre);
var edades = lista.Select(p => p.Edad);

// Usar Take cuando sea posible
var primeros10 = personas.Take(10).ToList();
```

## 19. LINQ PERSONALIZADO

### Extensiones Personalizadas

```csharp
public static class LinqExtensions
{
    public static IEnumerable<T> WhereIf<T>(
        this IEnumerable<T> source,
        bool condition,
        Func<T, bool> predicate)
    {
        return condition ? source.Where(predicate) : source;
    }

    public static IEnumerable<T> Paginar<T>(
        this IEnumerable<T> source,
        int pagina,
        int elementosPorPagina)
    {
        return source.Skip((pagina - 1) * elementosPorPagina)
                    .Take(elementosPorPagina);
    }

    public static IEnumerable<T> DistinctBy<T, TKey>(
        this IEnumerable<T> source,
        Func<T, TKey> keySelector)
    {
        var seenKeys = new HashSet<TKey>();
        return source.Where(element => seenKeys.Add(keySelector(element)));
    }

    public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source)
    {
        var random = new Random();
        return source.OrderBy(x => random.Next());
    }
}
```

Esta guía completa de LINQ cubre desde los conceptos fundamentales hasta técnicas avanzadas, proporcionando tanto definiciones teóricas como ejemplos prácticos extensos que demuestran cómo aplicar LINQ en diferentes escenarios de programación. 