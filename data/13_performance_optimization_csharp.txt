# Performance y Optimización en C#: Guía Completa

## Introducción a la Optimización de Performance

La optimización de performance en C# es fundamental para crear aplicaciones eficientes y responsivas. Una buena performance mejora la experiencia del usuario, reduce costos de infraestructura y permite que las aplicaciones manejen mayor carga.

### Principios de Optimización
- **Medir primero**: Optimizar basándose en datos reales
- **Optimización prematura**: Evitar optimizar antes de identificar cuellos de botella
- **Profiling**: Usar herramientas para identificar problemas de performance
- **Algoritmos eficientes**: Elegir la estructura de datos y algoritmo correctos
- **Gestión de memoria**: Minimizar asignaciones y garbage collection

## Profiling y Medición de Performance

### 1. Herramientas de Profiling

#### Visual Studio Profiler
```csharp
public class PerformanceExample
{
    public void ExpensiveOperation()
    {
        // El profiler mostrará el tiempo gastado en este método
        var list = new List<int>();
        for (int i = 0; i < 1000000; i++)
        {
            list.Add(i);
        }
        
        // Operación costosa
        var result = list.Where(x => x % 2 == 0).ToList();
    }
}
```

#### BenchmarkDotNet
```csharp
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

[MemoryDiagnoser]
public class StringConcatenationBenchmark
{
    private const int Iterations = 10000;
    
    [Benchmark]
    public string StringConcatenation()
    {
        string result = "";
        for (int i = 0; i < Iterations; i++)
        {
            result += i.ToString();
        }
        return result;
    }
    
    [Benchmark]
    public string StringBuilderConcatenation()
    {
        var sb = new StringBuilder();
        for (int i = 0; i < Iterations; i++)
        {
            sb.Append(i.ToString());
        }
        return sb.ToString();
    }
    
    [Benchmark]
    public string StringInterpolation()
    {
        var sb = new StringBuilder();
        for (int i = 0; i < Iterations; i++)
        {
            sb.Append($"{i}");
        }
        return sb.ToString();
    }
}

// Ejecutar benchmarks
public class Program
{
    public static void Main(string[] args)
    {
        var summary = BenchmarkRunner.Run<StringConcatenationBenchmark>();
    }
}
```

### 2. Performance Counters

```csharp
public class PerformanceMonitor
{
    private readonly PerformanceCounter _cpuCounter;
    private readonly PerformanceCounter _memoryCounter;
    private readonly PerformanceCounter _gcCounter;
    
    public PerformanceMonitor()
    {
        _cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
        _memoryCounter = new PerformanceCounter("Memory", "Available MBytes");
        _gcCounter = new PerformanceCounter(".NET CLR Memory", "# Gen 0 Collections", "_Global_");
    }
    
    public void LogPerformanceMetrics()
    {
        float cpuUsage = _cpuCounter.NextValue();
        float availableMemory = _memoryCounter.NextValue();
        float gcCollections = _gcCounter.NextValue();
        
        Console.WriteLine($"CPU Usage: {cpuUsage:F2}%");
        Console.WriteLine($"Available Memory: {availableMemory:F2} MB");
        Console.WriteLine($"GC Collections: {gcCollections}");
    }
}
```

## Optimización de Memoria

### 1. Gestión de Garbage Collection

```csharp
public class MemoryOptimizationExample
{
    // EVITAR: Crear objetos innecesarios
    public void InefficientMethod()
    {
        for (int i = 0; i < 1000; i++)
        {
            // Cada iteración crea un nuevo objeto
            var list = new List<int>();
            list.Add(i);
            ProcessList(list);
        }
    }
    
    // MEJOR: Reutilizar objetos
    public void EfficientMethod()
    {
        var list = new List<int>();
        for (int i = 0; i < 1000; i++)
        {
            list.Clear(); // Reutilizar el mismo objeto
            list.Add(i);
            ProcessList(list);
        }
    }
    
    // EVITAR: Boxing/Unboxing innecesario
    public void BoxingExample()
    {
        int number = 42;
        object boxed = number; // Boxing
        int unboxed = (int)boxed; // Unboxing
    }
    
    // MEJOR: Usar tipos genéricos
    public void GenericExample()
    {
        var list = new List<int>(); // Sin boxing
        list.Add(42);
        int number = list[0]; // Sin unboxing
    }
}
```

### 2. Object Pooling

```csharp
public class ObjectPool<T> where T : class, new()
{
    private readonly ConcurrentQueue<T> _pool;
    private readonly int _maxSize;
    
    public ObjectPool(int maxSize = 100)
    {
        _pool = new ConcurrentQueue<T>();
        _maxSize = maxSize;
    }
    
    public T Get()
    {
        if (_pool.TryDequeue(out T item))
        {
            return item;
        }
        
        return new T();
    }
    
    public void Return(T item)
    {
        if (_pool.Count < _maxSize)
        {
            _pool.Enqueue(item);
        }
    }
}

public class DatabaseConnectionPool
{
    private readonly ObjectPool<SqlConnection> _connectionPool;
    
    public DatabaseConnectionPool()
    {
        _connectionPool = new ObjectPool<SqlConnection>();
    }
    
    public async Task<T> ExecuteQueryAsync<T>(Func<SqlConnection, Task<T>> query)
    {
        var connection = _connectionPool.Get();
        try
        {
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
            }
            
            return await query(connection);
        }
        finally
        {
            _connectionPool.Return(connection);
        }
    }
}
```

### 3. Structs vs Classes

```csharp
// Usar structs para objetos pequeños e inmutables
public struct Point
{
    public readonly double X;
    public readonly double Y;
    
    public Point(double x, double y)
    {
        X = x;
        Y = y;
    }
    
    public double DistanceTo(Point other)
    {
        var dx = X - other.X;
        var dy = Y - other.Y;
        return Math.Sqrt(dx * dx + dy * dy);
    }
}

// Usar clases para objetos grandes o mutables
public class ComplexObject
{
    public string Name { get; set; }
    public List<string> Tags { get; set; }
    public Dictionary<string, object> Properties { get; set; }
    
    public ComplexObject()
    {
        Tags = new List<string>();
        Properties = new Dictionary<string, object>();
    }
}
```

## Optimización de Algoritmos

### 1. Estructuras de Datos Eficientes

```csharp
public class DataStructureOptimization
{
    // EVITAR: Búsqueda lineal en listas grandes
    public bool InefficientSearch(List<string> list, string item)
    {
        return list.Contains(item); // O(n)
    }
    
    // MEJOR: Usar HashSet para búsquedas rápidas
    public bool EfficientSearch(HashSet<string> set, string item)
    {
        return set.Contains(item); // O(1)
    }
    
    // EVITAR: Múltiples búsquedas en la misma lista
    public List<string> InefficientFilter(List<string> list, List<string> filterItems)
    {
        var result = new List<string>();
        foreach (var item in list)
        {
            if (filterItems.Contains(item)) // O(n) por cada elemento
            {
                result.Add(item);
            }
        }
        return result;
    }
    
    // MEJOR: Convertir a HashSet para búsquedas eficientes
    public List<string> EfficientFilter(List<string> list, List<string> filterItems)
    {
        var filterSet = new HashSet<string>(filterItems); // O(n) una vez
        return list.Where(item => filterSet.Contains(item)).ToList(); // O(1) por elemento
    }
}
```

### 2. Algoritmos de Ordenamiento

```csharp
public class SortingOptimization
{
    // Para listas pequeñas (< 16 elementos)
    public void InsertionSort<T>(T[] array) where T : IComparable<T>
    {
        for (int i = 1; i < array.Length; i++)
        {
            T key = array[i];
            int j = i - 1;
            
            while (j >= 0 && array[j].CompareTo(key) > 0)
            {
                array[j + 1] = array[j];
                j--;
            }
            
            array[j + 1] = key;
        }
    }
    
    // Para listas grandes, usar algoritmos optimizados
    public void OptimizedSort<T>(T[] array) where T : IComparable<T>
    {
        if (array.Length < 16)
        {
            InsertionSort(array);
        }
        else
        {
            Array.Sort(array); // Usar el algoritmo optimizado del framework
        }
    }
}
```

### 3. Caching y Memoización

```csharp
public class CachingExample
{
    private readonly ConcurrentDictionary<int, long> _fibonacciCache = new ConcurrentDictionary<int, long>();
    
    // Sin cache - muy lento para números grandes
    public long FibonacciRecursive(int n)
    {
        if (n <= 1) return n;
        return FibonacciRecursive(n - 1) + FibonacciRecursive(n - 2);
    }
    
    // Con cache - mucho más rápido
    public long FibonacciCached(int n)
    {
        return _fibonacciCache.GetOrAdd(n, key =>
        {
            if (key <= 1) return key;
            return FibonacciCached(key - 1) + FibonacciCached(key - 2);
        });
    }
    
    // Iterativo - más eficiente en memoria
    public long FibonacciIterative(int n)
    {
        if (n <= 1) return n;
        
        long prev = 0, current = 1;
        for (int i = 2; i <= n; i++)
        {
            long next = prev + current;
            prev = current;
            current = next;
        }
        
        return current;
    }
}
```

## Optimización de LINQ

### 1. LINQ Eficiente

```csharp
public class LinqOptimization
{
    // EVITAR: Múltiples enumeraciones
    public void InefficientLinq(List<int> numbers)
    {
        var evenNumbers = numbers.Where(n => n % 2 == 0); // No se ejecuta aún
        var count = evenNumbers.Count(); // Primera enumeración
        var sum = evenNumbers.Sum(); // Segunda enumeración
    }
    
    // MEJOR: Materializar una vez
    public void EfficientLinq(List<int> numbers)
    {
        var evenNumbers = numbers.Where(n => n % 2 == 0).ToList(); // Materializar
        var count = evenNumbers.Count;
        var sum = evenNumbers.Sum();
    }
    
    // EVITAR: LINQ innecesario para operaciones simples
    public int InefficientCount(List<int> numbers)
    {
        return numbers.Where(n => n > 0).Count(); // Enumeración completa
    }
    
    // MEJOR: Usar Count con predicado
    public int EfficientCount(List<int> numbers)
    {
        return numbers.Count(n => n > 0); // Más eficiente
    }
    
    // EVITAR: Ordenar toda la colección cuando solo necesitas los primeros
    public List<int> InefficientTop(List<int> numbers, int count)
    {
        return numbers.OrderByDescending(n => n).Take(count).ToList();
    }
    
    // MEJOR: Usar algoritmos especializados
    public List<int> EfficientTop(List<int> numbers, int count)
    {
        // Para obtener los top N elementos, usar un heap o algoritmo especializado
        var heap = new SortedSet<int>();
        foreach (var number in numbers)
        {
            heap.Add(number);
            if (heap.Count > count)
            {
                heap.Remove(heap.Min);
            }
        }
        return heap.Reverse().ToList();
    }
}
```

### 2. Async LINQ

```csharp
public class AsyncLinqExample
{
    // EVITAR: Procesamiento secuencial
    public async Task<List<string>> InefficientAsyncProcessing(List<string> urls)
    {
        var results = new List<string>();
        foreach (var url in urls)
        {
            var content = await DownloadContentAsync(url);
            results.Add(content);
        }
        return results;
    }
    
    // MEJOR: Procesamiento paralelo
    public async Task<List<string>> EfficientAsyncProcessing(List<string> urls)
    {
        var tasks = urls.Select(url => DownloadContentAsync(url));
        return await Task.WhenAll(tasks);
    }
    
    // Para grandes cantidades de datos, usar procesamiento por lotes
    public async Task<List<string>> BatchProcessing(List<string> urls, int batchSize = 10)
    {
        var results = new List<string>();
        
        for (int i = 0; i < urls.Count; i += batchSize)
        {
            var batch = urls.Skip(i).Take(batchSize);
            var batchTasks = batch.Select(url => DownloadContentAsync(url));
            var batchResults = await Task.WhenAll(batchTasks);
            results.AddRange(batchResults);
        }
        
        return results;
    }
}
```

## Optimización de Base de Datos

### 1. Entity Framework Optimization

```csharp
public class EfOptimization
{
    private readonly ApplicationDbContext _context;
    
    public EfOptimization(ApplicationDbContext context)
    {
        _context = context;
    }
    
    // EVITAR: N+1 queries
    public async Task<List<User>> InefficientQuery()
    {
        var users = await _context.Users.ToListAsync();
        foreach (var user in users)
        {
            // Esto genera una query adicional por cada usuario
            var orders = await _context.Orders
                .Where(o => o.UserId == user.Id)
                .ToListAsync();
        }
        return users;
    }
    
    // MEJOR: Usar Include para eager loading
    public async Task<List<User>> EfficientQuery()
    {
        return await _context.Users
            .Include(u => u.Orders)
            .ToListAsync();
    }
    
    // EVITAR: Cargar datos innecesarios
    public async Task<List<User>> InefficientProjection()
    {
        var users = await _context.Users.ToListAsync();
        return users.Select(u => new { u.Id, u.Name }).ToList();
    }
    
    // MEJOR: Usar proyección en la query
    public async Task<List<object>> EfficientProjection()
    {
        return await _context.Users
            .Select(u => new { u.Id, u.Name })
            .ToListAsync();
    }
    
    // EVITAR: Múltiples queries para operaciones en lote
    public async Task InefficientBatchUpdate(List<int> userIds)
    {
        foreach (var userId in userIds)
        {
            var user = await _context.Users.FindAsync(userId);
            user.LastLoginDate = DateTime.UtcNow;
        }
        await _context.SaveChangesAsync();
    }
    
    // MEJOR: Usar operaciones en lote
    public async Task EfficientBatchUpdate(List<int> userIds)
    {
        await _context.Users
            .Where(u => userIds.Contains(u.Id))
            .ExecuteUpdateAsync(s => s.SetProperty(u => u.LastLoginDate, DateTime.UtcNow));
    }
}
```

### 2. Connection Pooling

```csharp
public class ConnectionPoolingExample
{
    private readonly string _connectionString;
    
    public ConnectionPoolingExample(string connectionString)
    {
        _connectionString = connectionString;
    }
    
    // EVITAR: Crear conexiones manualmente
    public async Task<string> InefficientConnection()
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            // Usar conexión
            return "result";
        }
    }
    
    // MEJOR: Usar connection pooling automático
    public async Task<string> EfficientConnection()
    {
        // Entity Framework maneja el connection pooling automáticamente
        using (var context = new ApplicationDbContext(_connectionString))
        {
            var result = await context.Users.FirstOrDefaultAsync();
            return result?.Name ?? "Not found";
        }
    }
}
```

## Optimización de Web APIs

### 1. Response Caching

```csharp
[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private readonly IProductService _productService;
    
    public ProductsController(IProductService productService)
    {
        _productService = productService;
    }
    
    [HttpGet]
    [ResponseCache(Duration = 300)] // Cache por 5 minutos
    public async Task<ActionResult<List<Product>>> GetProducts()
    {
        var products = await _productService.GetAllAsync();
        return Ok(products);
    }
    
    [HttpGet("{id}")]
    [ResponseCache(Duration = 600, VaryByQueryKeys = new[] { "id" })]
    public async Task<ActionResult<Product>> GetProduct(int id)
    {
        var product = await _productService.GetByIdAsync(id);
        if (product == null)
            return NotFound();
        
        return Ok(product);
    }
}
```

### 2. Compression

```csharp
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddResponseCompression(options =>
        {
            options.EnableForHttps = true;
            options.Providers.Add<BrotliCompressionProvider>();
            options.Providers.Add<GzipCompressionProvider>();
        });
    }
    
    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        app.UseResponseCompression();
        // ... resto de la configuración
    }
}
```

### 3. Pagination

```csharp
public class PaginatedResult<T>
{
    public List<T> Items { get; set; }
    public int TotalCount { get; set; }
    public int PageNumber { get; set; }
    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public bool HasPreviousPage { get; set; }
    public bool HasNextPage { get; set; }
}

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    [HttpGet]
    public async Task<ActionResult<PaginatedResult<User>>> GetUsers(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 10)
    {
        var query = _context.Users.AsQueryable();
        
        var totalCount = await query.CountAsync();
        var totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
        
        var items = await query
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
        
        var result = new PaginatedResult<User>
        {
            Items = items,
            TotalCount = totalCount,
            PageNumber = pageNumber,
            PageSize = pageSize,
            TotalPages = totalPages,
            HasPreviousPage = pageNumber > 1,
            HasNextPage = pageNumber < totalPages
        };
        
        return Ok(result);
    }
}
```

## Conclusión

La optimización de performance en C# requiere un enfoque sistemático que incluya profiling, optimización de memoria, algoritmos eficientes y mejores prácticas específicas del framework. Es importante recordar que la optimización prematura puede ser contraproducente, por lo que siempre se debe medir primero y optimizar basándose en datos reales.

Las herramientas modernas como BenchmarkDotNet, Visual Studio Profiler y las características integradas de .NET proporcionan excelentes recursos para identificar y resolver problemas de performance. La combinación de estas herramientas con un conocimiento sólido de las mejores prácticas de C# y .NET es la clave para crear aplicaciones de alto rendimiento.
