# Servicios en Segundo Plano y Procesamiento Asíncrono en .NET

## Introducción
Los servicios en segundo plano son fundamentales para aplicaciones modernas que requieren procesamiento continuo, tareas programadas y operaciones asíncronas.

### 1. BackgroundService Base
```csharp
public class EmailProcessingService : BackgroundService
{
    private readonly ILogger<EmailProcessingService> _logger;
    private readonly IServiceProvider _serviceProvider;
    private readonly IConfiguration _configuration;
    
    public EmailProcessingService(
        ILogger<EmailProcessingService> logger,
        IServiceProvider serviceProvider,
        IConfiguration configuration)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
        _configuration = configuration;
    }
    
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Email Processing Service started");
        
        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                await ProcessPendingEmailsAsync(stoppingToken);
                await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);
            }
            catch (OperationCanceledException)
            {
                _logger.LogInformation("Email Processing Service stopped");
                break;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Email Processing Service");
                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);
            }
        }
    }
    
    private async Task ProcessPendingEmailsAsync(CancellationToken stoppingToken)
    {
        using var scope = _serviceProvider.CreateScope();
        var emailService = scope.ServiceProvider.GetRequiredService<IEmailService>();
        var emailRepository = scope.ServiceProvider.GetRequiredService<IEmailRepository>();
        
        var pendingEmails = await emailRepository.GetPendingEmailsAsync();
        
        foreach (var email in pendingEmails)
        {
            if (stoppingToken.IsCancellationRequested)
                break;
                
            try
            {
                await emailService.SendEmailAsync(email);
                await emailRepository.MarkAsSentAsync(email.Id);
                _logger.LogInformation("Email {EmailId} sent successfully", email.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send email {EmailId}", email.Id);
                await emailRepository.MarkAsFailedAsync(email.Id, ex.Message);
            }
        }
    }
}
```

### 2. HostedService con IHostedService
```csharp
public class DataSyncService : IHostedService, IDisposable
{
    private readonly ILogger<DataSyncService> _logger;
    private Timer _timer;
    private readonly IServiceProvider _serviceProvider;
    
    public DataSyncService(
        ILogger<DataSyncService> logger,
        IServiceProvider serviceProvider)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
    }
    
    public Task StartAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("Data Sync Service starting");
        
        _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromHours(1));
        
        return Task.CompletedTask;
    }
    
    private async void DoWork(object state)
    {
        try
        {
            using var scope = _serviceProvider.CreateScope();
            var syncService = scope.ServiceProvider.GetRequiredService<IDataSyncService>();
            
            await syncService.SyncDataAsync();
            _logger.LogInformation("Data sync completed successfully");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during data sync");
        }
    }
    
    public Task StopAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("Data Sync Service stopping");
        
        _timer?.Change(Timeout.Infinite, 0);
        
        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        _timer?.Dispose();
    }
}
```

### 3. Tareas Programadas con Quartz.NET
```csharp
public class ScheduledJobService : IHostedService
{
    private readonly ISchedulerFactory _schedulerFactory;
    private readonly ILogger<ScheduledJobService> _logger;
    private IScheduler _scheduler;
    
    public ScheduledJobService(
        ISchedulerFactory schedulerFactory,
        ILogger<ScheduledJobService> logger)
    {
        _schedulerFactory = schedulerFactory;
        _logger = logger;
    }
    
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
        
        // Job para limpiar logs antiguos
        var cleanupJob = JobBuilder.Create<LogCleanupJob>()
            .WithIdentity("logCleanupJob")
            .Build();
            
        var cleanupTrigger = TriggerBuilder.Create()
            .WithIdentity("logCleanupTrigger")
            .WithCronSchedule("0 0 2 * * ?") // Diario a las 2 AM
            .Build();
            
        await _scheduler.ScheduleJob(cleanupJob, cleanupTrigger, cancellationToken);
        
        // Job para backup de base de datos
        var backupJob = JobBuilder.Create<DatabaseBackupJob>()
            .WithIdentity("backupJob")
            .Build();
            
        var backupTrigger = TriggerBuilder.Create()
            .WithIdentity("backupTrigger")
            .WithCronSchedule("0 0 1 * * ?") // Diario a la 1 AM
            .Build();
            
        await _scheduler.ScheduleJob(backupJob, backupTrigger, cancellationToken);
        
        await _scheduler.Start(cancellationToken);
        _logger.LogInformation("Scheduled jobs started");
    }
    
    public async Task StopAsync(CancellationToken cancellationToken)
    {
        if (_scheduler != null)
        {
            await _scheduler.Shutdown(cancellationToken);
            _logger.LogInformation("Scheduled jobs stopped");
        }
    }
}

// Job para limpiar logs
public class LogCleanupJob : IJob
{
    private readonly ILogger<LogCleanupJob> _logger;
    private readonly IServiceProvider _serviceProvider;
    
    public LogCleanupJob(ILogger<LogCleanupJob> logger, IServiceProvider serviceProvider)
    {
        _logger = logger;
        _serviceProvider = serviceProvider;
    }
    
    public async Task Execute(IJobExecutionContext context)
    {
        try
        {
            using var scope = _serviceProvider.CreateScope();
            var logService = scope.ServiceProvider.GetRequiredService<ILogService>();
            
            var deletedCount = await logService.CleanupOldLogsAsync(TimeSpan.FromDays(30));
            _logger.LogInformation("Cleaned up {Count} old log entries", deletedCount);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during log cleanup job");
        }
    }
}
```

### 4. Cola de Trabajos con Hangfire
```csharp
public class JobQueueService
{
    private readonly IBackgroundJobClient _backgroundJobClient;
    private readonly IRecurringJobManager _recurringJobManager;
    private readonly ILogger<JobQueueService> _logger;
    
    public JobQueueService(
        IBackgroundJobClient backgroundJobClient,
        IRecurringJobManager recurringJobManager,
        ILogger<JobQueueService> logger)
    {
        _backgroundJobClient = backgroundJobClient;
        _recurringJobManager = recurringJobManager;
        _logger = logger;
    }
    
    public void EnqueueEmailJob(EmailJobData jobData)
    {
        var jobId = _backgroundJobClient.Enqueue<IEmailService>(
            service => service.SendEmailAsync(jobData));
            
        _logger.LogInformation("Email job {JobId} enqueued", jobId);
    }
    
    public void EnqueueReportGenerationJob(ReportJobData jobData)
    {
        var jobId = _backgroundJobClient.Enqueue<IReportService>(
            service => service.GenerateReportAsync(jobData));
            
        _logger.LogInformation("Report generation job {JobId} enqueued", jobId);
    }
    
    public void ScheduleRecurringJob()
    {
        _recurringJobManager.AddOrUpdate<IEmailService>(
            "daily-digest",
            service => service.SendDailyDigestAsync(),
            Cron.Daily);
    }
}

// Configuración en Program.cs
builder.Services.AddHangfire(configuration => configuration
    .SetDataCompatibilityLevel(CompatibilityLevel.Version_170)
    .UseSimpleAssemblyNameTypeSerializer()
    .UseRecommendedSerializerSettings()
    .UseSqlServerStorage(builder.Configuration.GetConnectionString("HangfireConnection")));

builder.Services.AddHangfireServer();
```

### 5. Procesamiento de Colas con RabbitMQ
```csharp
public class MessageProcessorService : BackgroundService
{
    private readonly IConnection _connection;
    private readonly IModel _channel;
    private readonly ILogger<MessageProcessorService> _logger;
    private readonly IServiceProvider _serviceProvider;
    
    public MessageProcessorService(
        IConnectionFactory connectionFactory,
        ILogger<MessageProcessorService> logger,
        IServiceProvider serviceProvider)
    {
        _connection = connectionFactory.CreateConnection();
        _channel = _connection.CreateModel();
        _logger = logger;
        _serviceProvider = serviceProvider;
        
        _channel.QueueDeclare("email-queue", durable: true, exclusive: false, autoDelete: false);
        _channel.BasicQos(0, 1, false);
    }
    
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        var consumer = new EventingBasicConsumer(_channel);
        
        consumer.Received += async (model, ea) =>
        {
            var body = ea.Body.ToArray();
            var message = Encoding.UTF8.GetString(body);
            
            try
            {
                await ProcessMessageAsync(message);
                _channel.BasicAck(ea.DeliveryTag, false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing message");
                _channel.BasicNack(ea.DeliveryTag, false, true);
            }
        };
        
        _channel.BasicConsume(queue: "email-queue",
                            autoAck: false,
                            consumer: consumer);
        
        while (!stoppingToken.IsCancellationRequested)
        {
            await Task.Delay(1000, stoppingToken);
        }
    }
    
    private async Task ProcessMessageAsync(string message)
    {
        using var scope = _serviceProvider.CreateScope();
        var emailService = scope.ServiceProvider.GetRequiredService<IEmailService>();
        
        var emailData = JsonSerializer.Deserialize<EmailData>(message);
        await emailService.SendEmailAsync(emailData);
    }
    
    public override void Dispose()
    {
        _channel?.Dispose();
        _connection?.Dispose();
        base.Dispose();
    }
}
```

### 6. Worker Service con .NET
```csharp
public class Worker : BackgroundService
{
    private readonly ILogger<Worker> _logger;
    private readonly IConfiguration _configuration;
    private readonly IServiceProvider _serviceProvider;
    
    public Worker(
        ILogger<Worker> logger,
        IConfiguration configuration,
        IServiceProvider serviceProvider)
    {
        _logger = logger;
        _configuration = configuration;
        _serviceProvider = serviceProvider;
    }
    
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("Worker service started at: {time}", DateTimeOffset.Now);
        
        while (!stoppingToken.IsCancellationRequested)
        {
            await ProcessWorkItemsAsync(stoppingToken);
            await Task.Delay(TimeSpan.FromSeconds(30), stoppingToken);
        }
    }
    
    private async Task ProcessWorkItemsAsync(CancellationToken stoppingToken)
    {
        try
        {
            using var scope = _serviceProvider.CreateScope();
            var workItemService = scope.ServiceProvider.GetRequiredService<IWorkItemService>();
            
            var workItems = await workItemService.GetPendingWorkItemsAsync();
            
            foreach (var workItem in workItems)
            {
                if (stoppingToken.IsCancellationRequested)
                    break;
                    
                await ProcessWorkItemAsync(workItem);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error processing work items");
        }
    }
    
    private async Task ProcessWorkItemAsync(WorkItem workItem)
    {
        _logger.LogInformation("Processing work item {WorkItemId}", workItem.Id);
        
        // Simular procesamiento
        await Task.Delay(TimeSpan.FromSeconds(2));
        
        _logger.LogInformation("Work item {WorkItemId} processed successfully", workItem.Id);
    }
}
```

### 7. Health Checks para Servicios
```csharp
public class BackgroundServiceHealthCheck : IHealthCheck
{
    private readonly IServiceProvider _serviceProvider;
    
    public BackgroundServiceHealthCheck(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }
    
    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        try
        {
            using var scope = _serviceProvider.CreateScope();
            var healthService = scope.ServiceProvider.GetRequiredService<IHealthService>();
            
            var isHealthy = await healthService.CheckServiceHealthAsync();
            
            if (isHealthy)
            {
                return HealthCheckResult.Healthy("Background services are running");
            }
            
            return HealthCheckResult.Degraded("Some background services are having issues");
        }
        catch (Exception ex)
        {
            return HealthCheckResult.Unhealthy("Background services health check failed", ex);
        }
    }
}
```

### 8. Configuración de Servicios
```csharp
// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Registrar servicios en segundo plano
builder.Services.AddHostedService<EmailProcessingService>();
builder.Services.AddHostedService<DataSyncService>();

// Configurar Quartz.NET
builder.Services.AddQuartz(q =>
{
    q.UseMicrosoftDependencyInjectionJobFactory();
    
    var jobKey = new JobKey("LogCleanupJob");
    q.AddJob<LogCleanupJob>(opts => opts.WithIdentity(jobKey));
    
    q.AddTrigger(opts => opts
        .ForJob(jobKey)
        .WithIdentity("LogCleanupTrigger")
        .WithCronSchedule("0 0 2 * * ?"));
});

builder.Services.AddQuartzHostedService(q => q.WaitForJobsToComplete = true);

// Configurar Hangfire
builder.Services.AddHangfire(config => config
    .UseSqlServerStorage(builder.Configuration.GetConnectionString("HangfireConnection")));
builder.Services.AddHangfireServer();

// Configurar RabbitMQ
builder.Services.AddSingleton<IConnectionFactory>(sp =>
{
    return new ConnectionFactory
    {
        HostName = builder.Configuration["RabbitMQ:Host"],
        UserName = builder.Configuration["RabbitMQ:Username"],
        Password = builder.Configuration["RabbitMQ:Password"]
    };
});

builder.Services.AddHostedService<MessageProcessorService>();

// Health checks
builder.Services.AddHealthChecks()
    .AddCheck<BackgroundServiceHealthCheck>("background_services");

var app = builder.Build();

app.MapHealthChecks("/health");
```

### Conclusión
Los servicios en segundo plano son esenciales para:
- Procesamiento asíncrono de tareas
- Tareas programadas y recurrentes
- Procesamiento de colas de mensajes
- Mantenimiento automático del sistema
- Monitoreo y health checks

### Recursos
- [Background Services Documentation](https://docs.microsoft.com/dotnet/core/extensions/background-services)
- [Quartz.NET Documentation](https://www.quartz-scheduler.net/)
- [Hangfire Documentation](https://www.hangfire.io/)
- [RabbitMQ .NET Client](https://www.rabbitmq.com/dotnet.html)
