# Compatibilidad e Integración de .NET con Otras Tecnologías

## Introducción
.NET es una plataforma altamente interoperable que puede integrarse con múltiples tecnologías, lenguajes de programación y plataformas. Esta guía cubre las principales opciones de integración.

## Integración con JavaScript/TypeScript

### ASP.NET Core con JavaScript Frontend
```csharp
// Program.cs - Configurar CORS para APIs
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowReactApp", policy =>
    {
        policy.WithOrigins("http://localhost:3000")
              .AllowAnyHeader()
              .AllowAnyMethod();
    });
});

// Startup.cs
app.UseCors("AllowReactApp");
```

### SignalR para Comunicación en Tiempo Real
```csharp
// Program.cs
builder.Services.AddSignalR();

// Hub
public class ChatHub : Hub
{
    public async Task SendMessage(string user, string message)
    {
        await Clients.All.SendAsync("ReceiveMessage", user, message);
    }
}

// JavaScript Client
const connection = new signalR.HubConnectionBuilder()
    .withUrl("/chatHub")
    .build();

connection.on("ReceiveMessage", (user, message) => {
    console.log(`${user}: ${message}`);
});

connection.start();
```

### WebAssembly con Blazor
```csharp
// Blazor WebAssembly - C# en el navegador
@page "/counter"
@inject IJSRuntime JSRuntime

<h1>Counter</h1>
<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private async Task IncrementCount()
    {
        currentCount++;
        await JSRuntime.InvokeVoidAsync("console.log", $"Count: {currentCount}");
    }
}
```

## Integración con Python

### IronPython (Python en .NET)
```csharp
// Instalación
// dotnet add package IronPython

using IronPython.Hosting;
using Microsoft.Scripting.Hosting;

var engine = Python.CreateEngine();
var scope = engine.CreateScope();

// Ejecutar código Python
engine.Execute(@"
def calculate_fibonacci(n):
    if n <= 1:
        return n
    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)
", scope);

var fibonacci = scope.GetVariable<Func<int, int>>("calculate_fibonacci");
var result = fibonacci(10);
```

### Python.NET
```csharp
// Instalación
// dotnet add package pythonnet

using Python.Runtime;

using (Py.GIL())
{
    dynamic np = Py.Import("numpy");
    dynamic plt = Py.Import("matplotlib.pyplot");
    
    // Usar NumPy
    dynamic array = np.array(new[] { 1, 2, 3, 4, 5 });
    dynamic result = np.mean(array);
    
    // Usar Matplotlib
    plt.plot(array);
    plt.savefig("plot.png");
}
```

### gRPC entre .NET y Python
```protobuf
// proto/service.proto
syntax = "proto3";

service DataService {
    rpc ProcessData (DataRequest) returns (DataResponse);
}

message DataRequest {
    string data = 1;
}

message DataResponse {
    string result = 1;
}
```

```csharp
// .NET Server
public class DataService : DataServiceBase
{
    public override async Task<DataResponse> ProcessData(DataRequest request, ServerCallContext context)
    {
        var result = await ProcessDataAsync(request.Data);
        return new DataResponse { Result = result };
    }
}
```

```python
# Python Client
import grpc
import service_pb2
import service_pb2_grpc

with grpc.insecure_channel('localhost:5000') as channel:
    stub = service_pb2_grpc.DataServiceStub(channel)
    response = stub.ProcessData(service_pb2.DataRequest(data="test"))
    print(response.result)
```

## Integración con Java

### JNBridge
```csharp
// Configurar JNBridge
JNBridge.License.LicenseManager.SetJvmPath(@"C:\Program Files\Java\jdk-11\bin\server\jvm.dll");

// Crear proxy para clase Java
var javaObject = JNBridge.License.LicenseManager.CreateJavaObject("com.example.MyClass");

// Llamar métodos Java
var result = javaObject.MyMethod("parameter");
```

### IKVM.NET
```csharp
// Usar bibliotecas Java en .NET
using java.util;
using java.lang;

var list = new ArrayList();
list.add("Hello from Java");
list.add("Hello from .NET");

foreach (var item in list)
{
    Console.WriteLine(item);
}
```

### gRPC entre .NET y Java
```java
// Java Server
public class DataServiceImpl extends DataServiceGrpc.DataServiceImplBase {
    @Override
    public void processData(DataRequest request, StreamObserver<DataResponse> responseObserver) {
        String result = processData(request.getData());
        DataResponse response = DataResponse.newBuilder().setResult(result).build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }
}
```

```csharp
// .NET Client
using var channel = GrpcChannel.ForAddress("http://localhost:5000");
var client = new DataService.DataServiceClient(channel);

var request = new DataRequest { Data = "test" };
var response = await client.ProcessDataAsync(request);
Console.WriteLine(response.Result);
```

## Integración con Servicios Web

### REST APIs
```csharp
// Cliente HTTP
public class ApiClient
{
    private readonly HttpClient _httpClient;
    
    public ApiClient(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }
    
    public async Task<List<Product>> GetProductsAsync()
    {
        var response = await _httpClient.GetAsync("/api/products");
        response.EnsureSuccessStatusCode();
        
        var json = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<List<Product>>(json);
    }
    
    public async Task<Product> CreateProductAsync(Product product)
    {
        var json = JsonSerializer.Serialize(product);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        var response = await _httpClient.PostAsync("/api/products", content);
        response.EnsureSuccessStatusCode();
        
        var responseJson = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<Product>(responseJson);
    }
}
```

### SOAP Web Services
```csharp
// Cliente SOAP
public class SoapClient
{
    private readonly HttpClient _httpClient;
    
    public async Task<string> CallSoapServiceAsync(string request)
    {
        var soapEnvelope = $@"
            <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/'>
                <soapenv:Header/>
                <soapenv:Body>
                    {request}
                </soapenv:Body>
            </soapenv:Envelope>";
        
        var content = new StringContent(soapEnvelope, Encoding.UTF8, "text/xml");
        var response = await _httpClient.PostAsync("http://example.com/soap", content);
        
        return await response.Content.ReadAsStringAsync();
    }
}
```

### GraphQL
```csharp
// Cliente GraphQL
public class GraphQLClient
{
    private readonly HttpClient _httpClient;
    
    public async Task<GraphQLResponse<T>> QueryAsync<T>(string query, object variables = null)
    {
        var request = new
        {
            query,
            variables
        };
        
        var json = JsonSerializer.Serialize(request);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        
        var response = await _httpClient.PostAsync("/graphql", content);
        var responseJson = await response.Content.ReadAsStringAsync();
        
        return JsonSerializer.Deserialize<GraphQLResponse<T>>(responseJson);
    }
}

// Uso
var client = new GraphQLClient(httpClient);
var response = await client.QueryAsync<Product>("query { product(id: 1) { id name price } }");
```

## Integración con Bases de Datos No-SQL

### MongoDB
```csharp
// Instalación
// dotnet add package MongoDB.Driver

public class MongoService
{
    private readonly IMongoCollection<Product> _products;
    
    public MongoService(IConfiguration configuration)
    {
        var client = new MongoClient(configuration.GetConnectionString("MongoDB"));
        var database = client.GetDatabase("MyDatabase");
        _products = database.GetCollection<Product>("Products");
    }
    
    public async Task<List<Product>> GetProductsAsync()
    {
        return await _products.Find(_ => true).ToListAsync();
    }
    
    public async Task<Product> GetProductByIdAsync(string id)
    {
        return await _products.Find(p => p.Id == id).FirstOrDefaultAsync();
    }
    
    public async Task CreateProductAsync(Product product)
    {
        await _products.InsertOneAsync(product);
    }
}
```

### Redis
```csharp
// Instalación
// dotnet add package StackExchange.Redis

public class RedisService
{
    private readonly IConnectionMultiplexer _redis;
    
    public RedisService(IConfiguration configuration)
    {
        _redis = ConnectionMultiplexer.Connect(configuration.GetConnectionString("Redis"));
    }
    
    public async Task SetAsync(string key, string value, TimeSpan? expiry = null)
    {
        var db = _redis.GetDatabase();
        await db.StringSetAsync(key, value, expiry);
    }
    
    public async Task<string> GetAsync(string key)
    {
        var db = _redis.GetDatabase();
        return await db.StringGetAsync(key);
    }
    
    public async Task<bool> DeleteAsync(string key)
    {
        var db = _redis.GetDatabase();
        return await db.KeyDeleteAsync(key);
    }
}
```

## Integración con Cloud Services

### AWS SDK
```csharp
// Instalación
// dotnet add package AWSSDK.S3

public class AwsS3Service
{
    private readonly IAmazonS3 _s3Client;
    
    public AwsS3Service(IConfiguration configuration)
    {
        var awsOptions = configuration.GetAWSOptions();
        _s3Client = awsOptions.CreateServiceClient<IAmazonS3>();
    }
    
    public async Task UploadFileAsync(string bucketName, string key, Stream fileStream)
    {
        var request = new PutObjectRequest
        {
            BucketName = bucketName,
            Key = key,
            InputStream = fileStream
        };
        
        await _s3Client.PutObjectAsync(request);
    }
    
    public async Task<Stream> DownloadFileAsync(string bucketName, string key)
    {
        var request = new GetObjectRequest
        {
            BucketName = bucketName,
            Key = key
        };
        
        var response = await _s3Client.GetObjectAsync(request);
        return response.ResponseStream;
    }
}
```

### Azure SDK
```csharp
// Instalación
// dotnet add package Azure.Storage.Blobs

public class AzureBlobService
{
    private readonly BlobServiceClient _blobServiceClient;
    
    public AzureBlobService(IConfiguration configuration)
    {
        var connectionString = configuration.GetConnectionString("AzureStorage");
        _blobServiceClient = new BlobServiceClient(connectionString);
    }
    
    public async Task UploadBlobAsync(string containerName, string blobName, Stream content)
    {
        var containerClient = _blobServiceClient.GetBlobContainerClient(containerName);
        var blobClient = containerClient.GetBlobClient(blobName);
        
        await blobClient.UploadAsync(content, overwrite: true);
    }
    
    public async Task<Stream> DownloadBlobAsync(string containerName, string blobName)
    {
        var containerClient = _blobServiceClient.GetBlobContainerClient(containerName);
        var blobClient = containerClient.GetBlobClient(blobName);
        
        var response = await blobClient.DownloadAsync();
        return response.Value.Content;
    }
}
```

## Integración con Contenedores

### Docker
```dockerfile
# Dockerfile para aplicación .NET
FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
WORKDIR /src
COPY ["MyApp.csproj", "./"]
RUN dotnet restore "MyApp.csproj"
COPY . .
RUN dotnet build "MyApp.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "MyApp.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "MyApp.dll"]
```

### Docker Compose
```yaml
# docker-compose.yml
version: '3.8'
services:
  webapp:
    build: .
    ports:
      - "5000:80"
    depends_on:
      - db
      - redis
    environment:
      - ConnectionStrings__DefaultConnection=Server=db;Database=MyDb;User=sa;Password=Your_password123
      - ConnectionStrings__Redis=redis:6379
  
  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Your_password123
    ports:
      - "1433:1433"
  
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
```

## Integración con Microservicios

### Service Discovery
```csharp
// Consul Service Discovery
public class ConsulService
{
    private readonly IConsulClient _consulClient;
    
    public ConsulService(IConfiguration configuration)
    {
        _consulClient = new ConsulClient(config =>
        {
            config.Address = new Uri(configuration["Consul:Address"]);
        });
    }
    
    public async Task RegisterServiceAsync(string serviceName, string serviceId, string address, int port)
    {
        var registration = new AgentServiceRegistration
        {
            ID = serviceId,
            Name = serviceName,
            Address = address,
            Port = port,
            Check = new AgentServiceCheck
            {
                HTTP = $"http://{address}:{port}/health",
                Interval = TimeSpan.FromSeconds(10)
            }
        };
        
        await _consulClient.Agent.ServiceRegister(registration);
    }
    
    public async Task<List<string>> GetServiceInstancesAsync(string serviceName)
    {
        var response = await _consulClient.Health.Service(serviceName);
        return response.Response.Select(s => $"{s.Service.Address}:{s.Service.Port}").ToList();
    }
}
```

### API Gateway
```csharp
// Ocelot API Gateway
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddOcelot();
    }
    
    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        app.UseOcelot().Wait();
    }
}

// ocelot.json
{
  "Routes": [
    {
      "DownstreamPathTemplate": "/api/products/{everything}",
      "DownstreamScheme": "http",
      "DownstreamHostAndPorts": [
        {
          "Host": "product-service",
          "Port": 80
        }
      ],
      "UpstreamPathTemplate": "/products/{everything}",
      "UpstreamHttpMethod": [ "GET", "POST", "PUT", "DELETE" ]
    }
  ]
}
```

## Conclusión

.NET ofrece una interoperabilidad excepcional con otras tecnologías:

**Ventajas Principales:**
- **Multiplataforma**: Integración con Windows, Linux, macOS
- **Multiidioma**: Soporte para Python, Java, JavaScript
- **Protocolos estándar**: REST, SOAP, gRPC, GraphQL
- **Cloud nativo**: Integración con AWS, Azure, GCP
- **Contenedores**: Docker y Kubernetes nativos
- **Microservicios**: Service discovery, API gateways
- **Bases de datos**: SQL y No-SQL
- **Tiempo real**: SignalR, WebSockets

**Casos de Uso:**
- **Aplicaciones híbridas**: .NET + JavaScript frontend
- **Integración legacy**: Conectar con sistemas Java/Python existentes
- **APIs modernas**: REST, GraphQL, gRPC
- **Cloud computing**: Despliegue en múltiples plataformas
- **Microservicios**: Arquitecturas distribuidas
- **IoT**: Integración con dispositivos y sensores 