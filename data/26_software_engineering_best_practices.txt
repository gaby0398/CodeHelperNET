# Mejores Prácticas de Ingeniería de Software

## Introducción a las Mejores Prácticas

Las mejores prácticas de ingeniería de software son metodologías, técnicas y estándares que han sido probados y validados por la comunidad de desarrolladores para crear software de alta calidad, mantenible y escalable. Estas prácticas abarcan todos los aspectos del desarrollo de software, desde el diseño hasta el despliegue.

### Principios Fundamentales de Ingeniería de Software

#### 1. Principios SOLID

**Single Responsibility Principle (SRP)**:
- **Definición**: Una clase debe tener una sola razón para cambiar.
- **Beneficios**: Código más mantenible, testeable y reutilizable.
- **Implementación**: Cada clase debe tener una responsabilidad específica y bien definida.

```csharp
// ❌ Mal: Múltiples responsabilidades
public class UserManager
{
    public void CreateUser(User user) { /* ... */ }
    public void SendEmail(string to, string subject, string body) { /* ... */ }
    public void SaveToDatabase(User user) { /* ... */ }
    public void ValidateUser(User user) { /* ... */ }
}

// ✅ Bien: Responsabilidades separadas
public class UserService
{
    private readonly IUserRepository _userRepository;
    private readonly IEmailService _emailService;
    private readonly IUserValidator _userValidator;
    
    public UserService(IUserRepository userRepository, IEmailService emailService, IUserValidator userValidator)
    {
        _userRepository = userRepository;
        _emailService = emailService;
        _userValidator = userValidator;
    }
    
    public async Task<User> CreateUserAsync(CreateUserDto dto)
    {
        var user = new User(dto);
        
        if (!_userValidator.IsValid(user))
            throw new ValidationException("Usuario inválido");
        
        await _userRepository.SaveAsync(user);
        await _emailService.SendWelcomeEmailAsync(user.Email);
        
        return user;
    }
}
```

**Open/Closed Principle (OCP)**:
- **Definición**: Las entidades deben estar abiertas para extensión pero cerradas para modificación.
- **Beneficios**: Facilita la extensión sin afectar código existente.
- **Implementación**: Usar herencia, composición y polimorfismo.

```csharp
// ❌ Mal: Necesita modificación para agregar nuevos tipos
public class PaymentProcessor
{
    public void ProcessPayment(string paymentType, decimal amount)
    {
        if (paymentType == "CreditCard")
        {
            // Procesar tarjeta de crédito
        }
        else if (paymentType == "PayPal")
        {
            // Procesar PayPal
        }
        // Necesita modificación para agregar nuevos tipos
    }
}

// ✅ Bien: Extensible sin modificación
public interface IPaymentMethod
{
    void ProcessPayment(decimal amount);
}

public class CreditCardPayment : IPaymentMethod
{
    public void ProcessPayment(decimal amount) { /* ... */ }
}

public class PayPalPayment : IPaymentMethod
{
    public void ProcessPayment(decimal amount) { /* ... */ }
}

public class PaymentProcessor
{
    private readonly IPaymentMethod _paymentMethod;
    
    public PaymentProcessor(IPaymentMethod paymentMethod)
    {
        _paymentMethod = paymentMethod;
    }
    
    public void ProcessPayment(decimal amount)
    {
        _paymentMethod.ProcessPayment(amount);
    }
}
```

**Liskov Substitution Principle (LSP)**:
- **Definición**: Los objetos de una superclase deben poder ser reemplazados por objetos de una subclase sin afectar la corrección del programa.
- **Beneficios**: Garantiza que la herencia funcione correctamente.
- **Implementación**: Las subclases deben cumplir el contrato de la superclase.

```csharp
// ❌ Mal: Viola LSP
public class Rectangle
{
    public virtual int Width { get; set; }
    public virtual int Height { get; set; }
    public int Area => Width * Height;
}

public class Square : Rectangle
{
    public override int Width
    {
        get => base.Width;
        set
        {
            base.Width = value;
            base.Height = value; // Cambia el comportamiento
        }
    }
    
    public override int Height
    {
        get => base.Height;
        set
        {
            base.Width = value; // Cambia el comportamiento
            base.Height = value;
        }
    }
}

// ✅ Bien: Cumple LSP
public interface IShape
{
    int Area { get; }
}

public class Rectangle : IShape
{
    public int Width { get; set; }
    public int Height { get; set; }
    public int Area => Width * Height;
}

public class Square : IShape
{
    public int Side { get; set; }
    public int Area => Side * Side;
}
```

**Interface Segregation Principle (ISP)**:
- **Definición**: Los clientes no deben ser forzados a depender de interfaces que no utilizan.
- **Beneficios**: Reduce el acoplamiento y mejora la cohesión.
- **Implementación**: Crear interfaces específicas en lugar de interfaces monolíticas.

```csharp
// ❌ Mal: Interfaz monolítica
public interface IWorker
{
    void Work();
    void Eat();
    void Sleep();
}

public class Robot : IWorker
{
    public void Work() { /* ... */ }
    public void Eat() { throw new NotImplementedException(); } // No aplica
    public void Sleep() { throw new NotImplementedException(); } // No aplica
}

// ✅ Bien: Interfaces segregadas
public interface IWorkable
{
    void Work();
}

public interface IEatable
{
    void Eat();
}

public interface ISleepable
{
    void Sleep();
}

public class Human : IWorkable, IEatable, ISleepable
{
    public void Work() { /* ... */ }
    public void Eat() { /* ... */ }
    public void Sleep() { /* ... */ }
}

public class Robot : IWorkable
{
    public void Work() { /* ... */ }
}
```

**Dependency Inversion Principle (DIP)**:
- **Definición**: Los módulos de alto nivel no deben depender de módulos de bajo nivel. Ambos deben depender de abstracciones.
- **Beneficios**: Facilita el testing y la flexibilidad del diseño.
- **Implementación**: Programar hacia interfaces y usar inyección de dependencias.

```csharp
// ❌ Mal: Dependencia directa
public class UserService
{
    private readonly SqlUserRepository _userRepository;
    
    public UserService()
    {
        _userRepository = new SqlUserRepository(); // Dependencia directa
    }
}

// ✅ Bien: Dependencia invertida
public interface IUserRepository
{
    Task<User> GetByIdAsync(int id);
    Task SaveAsync(User user);
}

public class UserService
{
    private readonly IUserRepository _userRepository;
    
    public UserService(IUserRepository userRepository) // Inyección de dependencia
    {
        _userRepository = userRepository;
    }
}
```

#### 2. Principios DRY y KISS

**DRY (Don't Repeat Yourself)**:
- **Definición**: Evitar la duplicación de código y conocimiento.
- **Beneficios**: Reduce mantenimiento y errores.
- **Implementación**: Extraer código común a métodos, clases o bibliotecas.

```csharp
// ❌ Mal: Código duplicado
public class UserValidator
{
    public bool ValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email)) return false;
        if (!email.Contains("@")) return false;
        if (email.Length < 5) return false;
        return true;
    }
}

public class OrderValidator
{
    public bool ValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email)) return false;
        if (!email.Contains("@")) return false;
        if (email.Length < 5) return false;
        return true;
    }
}

// ✅ Bien: Código reutilizable
public static class ValidationHelper
{
    public static bool IsValidEmail(string email)
    {
        if (string.IsNullOrEmpty(email)) return false;
        if (!email.Contains("@")) return false;
        if (email.Length < 5) return false;
        return true;
    }
}

public class UserValidator
{
    public bool ValidateEmail(string email) => ValidationHelper.IsValidEmail(email);
}

public class OrderValidator
{
    public bool ValidateEmail(string email) => ValidationHelper.IsValidEmail(email);
}
```

**KISS (Keep It Simple, Stupid)**:
- **Definición**: Mantener el código simple y fácil de entender.
- **Beneficios**: Mejora la legibilidad y mantenibilidad.
- **Implementación**: Evitar complejidad innecesaria.

```csharp
// ❌ Mal: Complejidad innecesaria
public class ComplexCalculator
{
    public decimal CalculateTotal(List<OrderItem> items, decimal taxRate, decimal discountRate, bool applyLoyaltyDiscount, int loyaltyPoints)
    {
        var subtotal = items.Sum(item => item.Price * item.Quantity);
        var tax = subtotal * taxRate;
        var discount = subtotal * discountRate;
        var loyaltyDiscount = applyLoyaltyDiscount ? loyaltyPoints * 0.01m : 0;
        var total = subtotal + tax - discount - loyaltyDiscount;
        return Math.Max(total, 0);
    }
}

// ✅ Bien: Simple y claro
public class SimpleCalculator
{
    public decimal CalculateTotal(List<OrderItem> items, decimal taxRate)
    {
        var subtotal = items.Sum(item => item.Price * item.Quantity);
        var tax = subtotal * taxRate;
        return subtotal + tax;
    }
}
```

### Patrones de Diseño y Arquitectura

#### 1. Patrones Creacionales

**Factory Pattern**:
```csharp
public interface IConnection
{
    void Connect();
    void Disconnect();
}

public class SqlConnection : IConnection
{
    public void Connect() { Console.WriteLine("Conectando a SQL Server"); }
    public void Disconnect() { Console.WriteLine("Desconectando de SQL Server"); }
}

public class MongoConnection : IConnection
{
    public void Connect() { Console.WriteLine("Conectando a MongoDB"); }
    public void Disconnect() { Console.WriteLine("Desconectando de MongoDB"); }
}

public interface IConnectionFactory
{
    IConnection CreateConnection(string connectionType);
}

public class ConnectionFactory : IConnectionFactory
{
    public IConnection CreateConnection(string connectionType)
    {
        return connectionType.ToLower() switch
        {
            "sql" => new SqlConnection(),
            "mongo" => new MongoConnection(),
            _ => throw new ArgumentException("Tipo de conexión no soportado")
        };
    }
}
```

**Singleton Pattern**:
```csharp
public class Logger
{
    private static readonly Lazy<Logger> _instance = new Lazy<Logger>(() => new Logger());
    private readonly List<string> _logs = new();
    
    private Logger() { }
    
    public static Logger Instance => _instance.Value;
    
    public void Log(string message)
    {
        _logs.Add($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
    }
    
    public List<string> GetLogs() => _logs.ToList();
}
```

#### 2. Patrones Estructurales

**Adapter Pattern**:
```csharp
public interface INewPaymentSystem
{
    void ProcessPayment(decimal amount);
}

public class OldPaymentSystem
{
    public void Pay(decimal amount, string currency)
    {
        Console.WriteLine($"Paying {amount} {currency}");
    }
}

public class PaymentAdapter : INewPaymentSystem
{
    private readonly OldPaymentSystem _oldSystem;
    
    public PaymentAdapter(OldPaymentSystem oldSystem)
    {
        _oldSystem = oldSystem;
    }
    
    public void ProcessPayment(decimal amount)
    {
        _oldSystem.Pay(amount, "USD");
    }
}
```

**Decorator Pattern**:
```csharp
public interface ICoffee
{
    string GetDescription();
    decimal GetCost();
}

public class SimpleCoffee : ICoffee
{
    public string GetDescription() => "Simple Coffee";
    public decimal GetCost() => 2.00m;
}

public abstract class CoffeeDecorator : ICoffee
{
    protected ICoffee _coffee;
    
    public CoffeeDecorator(ICoffee coffee)
    {
        _coffee = coffee;
    }
    
    public virtual string GetDescription() => _coffee.GetDescription();
    public virtual decimal GetCost() => _coffee.GetCost();
}

public class MilkDecorator : CoffeeDecorator
{
    public MilkDecorator(ICoffee coffee) : base(coffee) { }
    
    public override string GetDescription() => _coffee.GetDescription() + ", Milk";
    public override decimal GetCost() => _coffee.GetCost() + 0.50m;
}
```

#### 3. Patrones Comportamentales

**Observer Pattern**:
```csharp
public interface IObserver
{
    void Update(string message);
}

public interface ISubject
{
    void Attach(IObserver observer);
    void Detach(IObserver observer);
    void Notify(string message);
}

public class NewsAgency : ISubject
{
    private readonly List<IObserver> _observers = new();
    
    public void Attach(IObserver observer)
    {
        _observers.Add(observer);
    }
    
    public void Detach(IObserver observer)
    {
        _observers.Remove(observer);
    }
    
    public void Notify(string message)
    {
        foreach (var observer in _observers)
        {
            observer.Update(message);
        }
    }
    
    public void PublishNews(string news)
    {
        Notify(news);
    }
}
```

**Strategy Pattern**:
```csharp
public interface ISortStrategy
{
    void Sort(List<int> list);
}

public class BubbleSortStrategy : ISortStrategy
{
    public void Sort(List<int> list)
    {
        // Implementación de bubble sort
        Console.WriteLine("Sorting with Bubble Sort");
    }
}

public class QuickSortStrategy : ISortStrategy
{
    public void Sort(List<int> list)
    {
        // Implementación de quick sort
        Console.WriteLine("Sorting with Quick Sort");
    }
}

public class Sorter
{
    private ISortStrategy _strategy;
    
    public void SetStrategy(ISortStrategy strategy)
    {
        _strategy = strategy;
    }
    
    public void Sort(List<int> list)
    {
        _strategy.Sort(list);
    }
}
```

### Testing y Calidad de Código

#### 1. Testing Unitario

**Estructura AAA (Arrange, Act, Assert)**:
```csharp
[TestFixture]
public class CalculatorTests
{
    private Calculator _calculator;
    
    [SetUp]
    public void Setup()
    {
        _calculator = new Calculator();
    }
    
    [Test]
    public void Add_TwoNumbers_ReturnsSum()
    {
        // Arrange
        int a = 5;
        int b = 3;
        int expected = 8;
        
        // Act
        int result = _calculator.Add(a, b);
        
        // Assert
        Assert.AreEqual(expected, result);
    }
    
    [Test]
    public void Divide_ByZero_ThrowsException()
    {
        // Arrange
        int a = 10;
        int b = 0;
        
        // Act & Assert
        Assert.Throws<DivideByZeroException>(() => _calculator.Divide(a, b));
    }
}
```

**Mocking y Stubbing**:
```csharp
[Test]
public async Task CreateUser_ValidData_SendsWelcomeEmail()
{
    // Arrange
    var mockEmailService = new Mock<IEmailService>();
    var mockRepository = new Mock<IUserRepository>();
    var userService = new UserService(mockRepository.Object, mockEmailService.Object);
    
    var createUserDto = new CreateUserDto
    {
        Name = "Test User",
        Email = "test@test.com"
    };
    
    mockRepository.Setup(r => r.SaveAsync(It.IsAny<User>()))
                  .Returns(Task.CompletedTask);
    
    // Act
    await userService.CreateUserAsync(createUserDto);
    
    // Assert
    mockEmailService.Verify(e => e.SendWelcomeEmailAsync("test@test.com"), Times.Once);
}
```

#### 2. Testing de Integración

```csharp
[TestFixture]
public class UserControllerIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly WebApplicationFactory<Program> _factory;
    
    public UserControllerIntegrationTests(WebApplicationFactory<Program> factory)
    {
        _factory = factory;
    }
    
    [Test]
    public async Task GetUsers_ReturnsSuccessStatusCode()
    {
        // Arrange
        var client = _factory.CreateClient();
        
        // Act
        var response = await client.GetAsync("/api/users");
        
        // Assert
        response.EnsureSuccessStatusCode();
    }
}
```

### Gestión de Configuración y Secretos

#### 1. Configuración Segura

**appsettings.json**:
```json
{
  "Database": {
    "ConnectionString": "Server=localhost;Database=MyApp;Trusted_Connection=true;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning"
    }
  },
  "Features": {
    "EnableCaching": true,
    "CacheTimeout": 300
  }
}
```

**User Secrets (desarrollo)**:
```json
{
  "Database": {
    "ConnectionString": "Server=localhost;Database=MyApp;User Id=sa;Password=your-password;"
  },
  "JWT": {
    "SecretKey": "your-super-secret-key-here"
  }
}
```

**Configuración en Código**:
```csharp
public class DatabaseSettings
{
    public string ConnectionString { get; set; }
    public int CommandTimeout { get; set; } = 30;
}

public class JwtSettings
{
    public string SecretKey { get; set; }
    public string Issuer { get; set; }
    public string Audience { get; set; }
    public int ExpirationInMinutes { get; set; }
}

// En Program.cs
builder.Services.Configure<DatabaseSettings>(builder.Configuration.GetSection("Database"));
builder.Services.Configure<JwtSettings>(builder.Configuration.GetSection("JWT"));
```

### Logging y Monitoreo

#### 1. Logging Estructurado

```csharp
public class UserService
{
    private readonly ILogger<UserService> _logger;
    private readonly IUserRepository _userRepository;
    
    public UserService(ILogger<UserService> logger, IUserRepository userRepository)
    {
        _logger = logger;
        _userRepository = userRepository;
    }
    
    public async Task<User> CreateUserAsync(CreateUserDto dto)
    {
        _logger.LogInformation("Creating user with email {Email}", dto.Email);
        
        try
        {
            var user = new User(dto);
            await _userRepository.SaveAsync(user);
            
            _logger.LogInformation("User created successfully with ID {UserId}", user.Id);
            return user;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating user with email {Email}", dto.Email);
            throw;
        }
    }
}
```

#### 2. Health Checks

```csharp
public class DatabaseHealthCheck : IHealthCheck
{
    private readonly ApplicationDbContext _context;
    
    public DatabaseHealthCheck(ApplicationDbContext context)
    {
        _context = context;
    }
    
    public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    {
        try
        {
            await _context.Database.CanConnectAsync(cancellationToken);
            return HealthCheckResult.Healthy("Database is healthy");
        }
        catch (Exception ex)
        {
            return HealthCheckResult.Unhealthy("Database is unhealthy", ex);
        }
    }
}

// En Program.cs
builder.Services.AddHealthChecks()
    .AddCheck<DatabaseHealthCheck>("Database")
    .AddCheck<ExternalApiHealthCheck>("External API");
```

### Performance y Optimización

#### 1. Caching

```csharp
public class CachedUserService : IUserService
{
    private readonly IUserService _userService;
    private readonly IMemoryCache _cache;
    private readonly ILogger<CachedUserService> _logger;
    
    public CachedUserService(IUserService userService, IMemoryCache cache, ILogger<CachedUserService> logger)
    {
        _userService = userService;
        _cache = cache;
        _logger = logger;
    }
    
    public async Task<User> GetUserByIdAsync(int id)
    {
        var cacheKey = $"user_{id}";
        
        if (_cache.TryGetValue(cacheKey, out User cachedUser))
        {
            _logger.LogInformation("User {UserId} retrieved from cache", id);
            return cachedUser;
        }
        
        var user = await _userService.GetUserByIdAsync(id);
        
        if (user != null)
        {
            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10))
                .SetAbsoluteExpiration(TimeSpan.FromHours(1));
            
            _cache.Set(cacheKey, user, cacheOptions);
            _logger.LogInformation("User {UserId} cached", id);
        }
        
        return user;
    }
}
```

#### 2. Optimización de Consultas

```csharp
public class OptimizedUserService
{
    private readonly ApplicationDbContext _context;
    
    public OptimizedUserService(ApplicationDbContext context)
    {
        _context = context;
    }
    
    // Eager loading para evitar N+1 queries
    public async Task<IEnumerable<User>> GetUsersWithOrdersAsync()
    {
        return await _context.Users
            .Include(u => u.Orders)
            .AsNoTracking() // Para consultas de solo lectura
            .ToListAsync();
    }
    
    // Proyección para reducir datos transferidos
    public async Task<IEnumerable<UserSummaryDto>> GetUserSummariesAsync()
    {
        return await _context.Users
            .Select(u => new UserSummaryDto
            {
                Id = u.Id,
                Name = u.Name,
                OrderCount = u.Orders.Count,
                TotalSpent = u.Orders.Sum(o => o.Total)
            })
            .AsNoTracking()
            .ToListAsync();
    }
}
```

### Seguridad

#### 1. Validación de Entrada

```csharp
public class CreateUserDto
{
    [Required]
    [StringLength(100, MinimumLength = 2)]
    public string Name { get; set; }
    
    [Required]
    [EmailAddress]
    public string Email { get; set; }
    
    [Required]
    [StringLength(100, MinimumLength = 8)]
    [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]")]
    public string Password { get; set; }
    
    [Compare("Password")]
    public string ConfirmPassword { get; set; }
}
```

#### 2. Sanitización de Datos

```csharp
public static class InputSanitizer
{
    public static string SanitizeHtml(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
        
        return HttpUtility.HtmlEncode(input);
    }
    
    public static string SanitizeSql(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
        
        // Usar parámetros en lugar de concatenación
        return input.Replace("'", "''");
    }
}
```

### Conclusión

Las mejores prácticas de ingeniería de software son fundamentales para crear software de calidad. Estas prácticas incluyen:

**Beneficios**:
- **Mantenibilidad**: Código más fácil de mantener y modificar.
- **Escalabilidad**: Arquitectura que puede crecer con el proyecto.
- **Testabilidad**: Código que es fácil de probar.
- **Reutilización**: Componentes que pueden ser reutilizados.
- **Seguridad**: Aplicaciones más seguras y robustas.

**Principios Clave**:
- **SOLID**: Principios fundamentales de diseño orientado a objetos.
- **DRY**: Evitar duplicación de código.
- **KISS**: Mantener la simplicidad.
- **Testing**: Cobertura completa de pruebas.
- **Seguridad**: Validación y sanitización de datos.

**Implementación**:
- **Patrones de Diseño**: Usar patrones apropiados para cada situación.
- **Arquitectura Limpia**: Separar responsabilidades y dependencias.
- **Testing**: Implementar testing unitario, integración y end-to-end.
- **Monitoreo**: Logging y health checks para observabilidad.
- **Performance**: Optimización y caching apropiados.

**Próximos Pasos**:
- **Microservicios**: Arquitectura de microservicios.
- **DevOps**: Integración y despliegue continuo.
- **Cloud Native**: Desarrollo nativo en la nube.
- **Event-Driven Architecture**: Arquitectura basada en eventos.
- **Domain-Driven Design**: Diseño dirigido por dominio.
